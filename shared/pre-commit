#!/bin/bash
# This hook do some checks before committing
if [ $DISABLED_PREC ] ; then
    exit 0;
fi

against=HEAD

# -- some variables / const init
VERT="\\033[1;32m"
NORMAL="\\033[0;39m"
ROUGE="\\033[1;31m"
JAUNE="\\033[1;33m"
current_status=0
final_status=0


# -- Find files with trailing whitespace / convert tab to spaces
echo -e "$NORMAL" "\nTESTING FOR TRAILING SPACES AND TABS...\n"
for FILE in `exec git diff-index --cached --name-only $against | grep "\.php\|.phtml\|\.js\|\.css" | sed '/^[+-]/d' | sed -r 's/:[0-9]+:.*//' | uniq` ; do
    # Fix them!
    spaces=$(grep -i $'\\t\|[[:space:]]\+$' "$FILE")
    if [ $? -eq 0 ]; then
        echo -e "$NORMAL" "Removing trailing spaces, fixing tabs in " "$FILE"
        sed -i 's/\t/    /g' "$FILE"
        sed -i 's/[[:space:]]*$//' "$FILE"
        sed -i 's/^M$//' "$FILE"
        git add "$FILE"
    fi
done

# -- Php parsing to check parse errors
for f in `git diff-index --cached --name-only $against | grep -e '\(php\|phtml\)$'`; do
 if [ -f $f ]; then
     php_lint=$(php -l $f)
   if [ $? -ne 0 ]; then
     echo "$php_lint"
     current_status=1
   fi
 fi
done
if [ $current_status -eq 0 ]; then
    echo -e "$VERT" "PHP PARSING (php -l) : OK" "$NORMAL"
else
    echo -e "$ROUGE" "PHP PARSING (php -l) : KO" "$NORMAL"
    final_status=1
fi
current_status=0

# -- check if unsolved conflict
for f in `git diff-index --cached --name-only $against | grep -e '\(sql\|php\|js\|css\|ini\|phtml\)$' | grep -v 'No such file or directory'`; do
  conflict_unsolved=$(grep -e '^[=|<|>]\{7\}' $f)
  if [ -n  "$conflict_unsolved" ]; then
    echo $f
    current_status=1
  fi
done
if [ $current_status -eq 0 ]; then
    echo -e "$VERT" "CHECK GIT UNSOLVED CONFLICT : OK" "$NORMAL"
else
    echo -e "$ROUGE" "CHECK GIT UNSOLVED CONFLICT : KO" "$NORMAL"
    final_status=1
fi
current_status=0

jshint_exists=$(which jshint &>/dev/null)
if [ $? -eq 0 ]; then
    # -- Test with js hint
    for f in `git diff-index --cached --name-only $against | grep -e 'public/js/.*\.js$'` ; do
      if [ -f $f ]; then
        return_jshint=$(jshint $f)
        if [ $? -ne 0 ]; then
            echo "$return_jshint"
            current_status=1
        fi
      fi
    done
    if [ $current_status -eq 0 ]; then
        echo -e "$VERT" "JSHINT : OK" "$NORMAL"
    else
        echo -e "$ROUGE" "JSHINT : KO" "$NORMAL"
        final_status=1
    fi
    current_status=0
else
    echo -e "$ROUGE" "JSHINT : NOT INSTALLED" "$NORMAL"
    final_status=1
fi

if [ $final_status -eq 1 ]; then
    echo -e "$ROUGE" "commit failed, check your code" "$NORMAL"
fi
exit $final_status

